
<<<<<<< HEAD



this copies the contents of the third level page table into the eax reg
 ; or is basically an or gate in minecraft
    ; there is redstone running from a redstone lamp to 2 levers, if both are off
    ; then the lamp is off - but if either of the levers are one, the lamp is on.
    ; here, if eax is is 0, and 0b11 is 0, then it returns zero. is eax is 1
    ; and 0b11 is 0, it returns 1. etc, etc
    ; the result is then stored in the page table

	; dword allocates a double word (according to google)
    ; basically copies the zeroth entry into eax
    ; the zero can be removed, mainly kept for style points
    ; cause the 0 will be changed to something that cannot
    ; be removed in later parts of this code so this keeps
    ; the symmetry


	; each page is 2 MiB in size so to ge tthe right memory
    ; location you multiply the number of the loop counter
    ; (mov ecx, 0) by 0x200000
; instead of adding + 0 we now add ecx * 8, because each entry is 8 bytes in size
    ; so the counter should be multiplied by 8

	; increments the loop counter by one

	compares ecx with 512, because there needs to be 512 page entries in total

	GDT TIME

section .rodata ; read only data
gdt64:
    dq 0
.code: equ $ - gdt64 
;.code us the name of this label, and the period tells nasm that its part of the previous label, so this isn't 'code' this is' 'gdt64.code'
    dq (1<<44) | (1<<47) | (1<<41) | (1<<43) | (1<<53) 
    ; executable, 64 bit, readable, present

    ; (1<<#) means left shift 1 by #, eg (1<<44) would set the 44th bit
    ; | is an or statement but cause this is data and not assembly instructions we use | not or


    ; 44: ‘descriptor type’: This has to be 1 for code and data segments
    ; 47: ‘present’: This is set to 1 if the entry is valid
    ; 41: ‘read/write’: If this is a code segment, 1 means that it’s readable
    ; 43: ‘executable’: Set to 1 for code segments
    ; 53: ‘64-bit’: if this is a 64-bit GDT, this should be set

.data: equ $ - gdt64
    dq (1<<44) | (1<<47) | (1<<41)
    ; present, readable

.pointer:
    dw .pointer - gdt64 - 1
    dq gdt64

; 64 bit land from here on out - scary
; remember theres no 'eax' or 'ebx' or any of that prehistoric stuff
; we now have the groundbreaking 'rax' and 'rbx'

section .text